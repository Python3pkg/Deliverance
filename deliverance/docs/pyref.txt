Python References
=================

Many places in the configuration take optional ``pyref`` attributes.  These reference a module/function name.  The general pattern is:

``pyref="location:function_name"``

    The ``location`` can be a module name, or ``file:/path/to/filename.py``.  If it is a literal filename, then the file is exec'd and turned into a module that way.  All references are to functions (or callable objects), and so you must give the function name.  Note that the ``file:`` case isn't a URL, just a path.

``pyarg-foo="bar"``

    You can pass extra ad hoc arguments to the function using attributes in this form.  This would add the keyword argument ``foo="bar"`` to the function call.  All arguments have string (well, unicode) values.

In addition to the ad-hoc arguments, parameters such as the request and response, and a logger,
will be passed into your ``pyref`` functions.  The particular parameters passed in vary for each
case, as do the expected return values.  See below for details.

When they are available, ``request`` and ``response`` are `WebOb <http://pythonpaste.org/webob/>`_ 
objects and ``log`` is a Python logging object.


Examples
--------

Theme
~~~~~

A ``<theme pyref>`` replaces a ``<theme href>`` and so your pyref function should return a string href.

You can use a ``<theme>`` like:

.. code-block:: xml

    <theme pyref="mymodule:get_theme" />

Then define a function like:

.. code-block:: python

    def get_theme(request, response, log):
        return "/%s/theme.html" % request.host

## FIXME: what is ``response`` actually?  Where does it come from?



Disabling
---------

You can disallow Python references using ``deliverance-proxy`` with:

.. code-block:: xml

    <server-settings>
      <execute-pyref>false</execute-pyref>
    </server-settings>

